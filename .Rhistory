# Check structure of datasets
str(b_demographics)
str(b_wellvisit)
str(b_NirsevimabImmu)
str(b_NirsevimabOutPT)
str(b_RSV)
# Check for ID duplicates before merge
sum(duplicated(b_demographics$id))
sum(duplicated(b_wellvisit$id))
sum(duplicated(b_NirsevimabImmu$id))
sum(duplicated(b_NirsevimabOutPT$id))
sum(duplicated(b_RSV$id))
# Ensure 'id' is of the same type across datasets
b_demographics$id <- as.character(b_demographics$id)
b_wellvisit$id <- as.character(b_wellvisit$id)
b_NirsevimabImmu$id <- as.character(b_NirsevimabImmu$id)
b_NirsevimabOutPT$id <- as.character(b_NirsevimabOutPT$id)
b_RSV$id <- as.character(b_RSV$id)
# Check for missing data
sum(is.na(b_demographics$id))
sum(is.na(b_wellvisit$id))
sum(is.na(b_NirsevimabImmu$id))
sum(is.na(b_NirsevimabOutPT$id))
sum(is.na(b_RSV$id))
# Merge datasets
merged_data <- left_join(b_demographics, b_wellvisit, by = "id")
merged_data <- left_join(merged_data, b_NirsevimabImmu, by = "id")
merged_data <- left_join(merged_data, b_NirsevimabOutPT, by = "id")
merged_data <- left_join(merged_data, b_RSV, by = "id")
# Create the final dataset with the required components
final_dataset <- merged_data %>%
group_by(id) %>%
summarize(
birth_date = first(birth_Date),  # Correct column name
total_well_visits = n_distinct(wellVisit_date, na.rm = TRUE),  # Counts distinct well visits
visits_within_30_days = sum(wellVisit_date <= (birth_date + 30), na.rm = TRUE),  # Correct column name
received_rsv_vaccine = ifelse(any(!is.na(Nirsevimab_immune_date)), 1, 0),  # Change "Yes" to 1 and "No" to 0
rsv_vaccine_date = ifelse(any(!is.na(Nirsevimab_immune_date)),
max(Nirsevimab_immune_date, na.rm = TRUE),
NA),
# Update references to medication_name and PROC_NAME
records_from_immunization = ifelse(any(!is.na(Nirsevimab_immune_date)), 1, 0),  # Change "Yes" to 1 and "No" to 0
records_from_medication = ifelse(any(!is.na(MEDICATION_NAME)), 1, 0),  # Use MEDICATION_NAME directly
records_from_procedure = ifelse(any(!is.na(PROC_NAME)), 1, 0),  # Use PROC_NAME directly
# Calculate total RSV records ensuring it cannot exceed 3
total_rsv_records = (ifelse(any(!is.na(Nirsevimab_immune_date)), 1, 0) +
ifelse(any(!is.na(MEDICATION_NAME)), 1, 0) +
ifelse(any(!is.na(PROC_NAME)), 1, 0))
)
# Save the final dataset
saveRDS(final_dataset, file = here::here("output/final_dataset.rds"))
# Check the structure and dimensions of the final dataset
str(final_dataset)
nrow(final_dataset)
# Set the working directory for the R script
here::i_am("code/01_upload_data.R")
# Load necessary libraries
library(dplyr)
library(readxl)
library(here)
# Read datasets from XLSX file
b_demographics <- readxl::read_excel(here::here("data/b_demog_2024.09.10.xlsx"))
b_wellvisit <- readxl::read_excel(here::here("data/b_wellvisit_2024.09.10.xlsx"))
b_NirsevimabImmu <- readxl::read_excel(here::here("data/b_NirsevimabImmu_2024.09.10.xlsx"))
b_NirsevimabOutPT <- readxl::read_excel(here::here("data/b_NirsevimabOutPT_2024.09.10.xlsx"))
b_RSV <- readxl::read_excel(here::here("data/b_RSV_2024.09.10.xlsx"))
# Save each dataset as .rds file
saveRDS(b_demographics, file = here::here("output/b_demographics.rds"))
saveRDS(b_wellvisit, file = here::here("output/b_wellvisit.rds"))
saveRDS(b_NirsevimabImmu, file = here::here("output/b_NirsevimabImmu.rds"))
saveRDS(b_NirsevimabOutPT, file = here::here("output/b_NirsevimabOutPT.rds"))
saveRDS(b_RSV, file = here::here("output/b_RSV.rds"))
# Check structure of datasets
str(b_demographics)
str(b_wellvisit)
str(b_NirsevimabImmu)
str(b_NirsevimabOutPT)
str(b_RSV)
# Check for ID duplicates before merge
sum(duplicated(b_demographics$id))
sum(duplicated(b_wellvisit$id))
sum(duplicated(b_NirsevimabImmu$id))
sum(duplicated(b_NirsevimabOutPT$id))
sum(duplicated(b_RSV$id))
# Ensure 'id' is of the same type across datasets
b_demographics$id <- as.character(b_demographics$id)
b_wellvisit$id <- as.character(b_wellvisit$id)
b_NirsevimabImmu$id <- as.character(b_NirsevimabImmu$id)
b_NirsevimabOutPT$id <- as.character(b_NirsevimabOutPT$id)
b_RSV$id <- as.character(b_RSV$id)
# Check for missing data
sum(is.na(b_demographics$id))
sum(is.na(b_wellvisit$id))
sum(is.na(b_NirsevimabImmu$id))
sum(is.na(b_NirsevimabOutPT$id))
sum(is.na(b_RSV$id))
# Merge datasets
merged_data <- left_join(b_demographics, b_wellvisit, by = "id")
merged_data <- left_join(merged_data, b_NirsevimabImmu, by = "id")
merged_data <- left_join(merged_data, b_NirsevimabOutPT, by = "id")
merged_data <- left_join(merged_data, b_RSV, by = "id")
# Create the final dataset with the required components
final_dataset <- merged_data %>%
group_by(id) %>%
summarize(
birth_date = first(birth_Date),  # Correct column name
total_well_visits = n_distinct(wellVisit_date, na.rm = TRUE),  # Counts distinct well visits
visits_within_30_days = sum(wellVisit_date <= (birth_date + 30), na.rm = TRUE),  # Correct column name
received_rsv_vaccine = ifelse(any(!is.na(Nirsevimab_immune_date)), 1, 0),  # Change "Yes" to 1 and "No" to 0
rsv_vaccine_date = ifelse(any(!is.na(Nirsevimab_immune_date)),
as.POSIXct(max(Nirsevimab_immune_date, na.rm = TRUE), origin = "1970-01-01"),
NA),
# Update references to medication_name and PROC_NAME
records_from_immunization = ifelse(any(!is.na(Nirsevimab_immune_date)), 1, 0),  # Change "Yes" to 1 and "No" to 0
records_from_medication = ifelse(any(!is.na(MEDICATION_NAME)), 1, 0),  # Use MEDICATION_NAME directly
records_from_procedure = ifelse(any(!is.na(PROC_NAME)), 1, 0),  # Use PROC_NAME directly
# Calculate total RSV records ensuring it cannot exceed 3
total_rsv_records = (ifelse(any(!is.na(Nirsevimab_immune_date)), 1, 0) +
ifelse(any(!is.na(MEDICATION_NAME)), 1, 0) +
ifelse(any(!is.na(PROC_NAME)), 1, 0))
)
# Save the final dataset
saveRDS(final_dataset, file = here::here("output/final_dataset.rds"))
# Check the structure and dimensions of the final dataset
str(final_dataset)
nrow(final_dataset)
# Set the working directory for the R script
here::i_am("code/01_upload_data.R")
# Load necessary libraries
library(dplyr)
library(readxl)
library(here)
# Read datasets from XLSX file
b_demographics <- readxl::read_excel(here::here("data/b_demog_2024.09.10.xlsx"))
b_wellvisit <- readxl::read_excel(here::here("data/b_wellvisit_2024.09.10.xlsx"))
b_NirsevimabImmu <- readxl::read_excel(here::here("data/b_NirsevimabImmu_2024.09.10.xlsx"))
b_NirsevimabOutPT <- readxl::read_excel(here::here("data/b_NirsevimabOutPT_2024.09.10.xlsx"))
b_RSV <- readxl::read_excel(here::here("data/b_RSV_2024.09.10.xlsx"))
# Save each dataset as .rds file
saveRDS(b_demographics, file = here::here("output/b_demographics.rds"))
saveRDS(b_wellvisit, file = here::here("output/b_wellvisit.rds"))
saveRDS(b_NirsevimabImmu, file = here::here("output/b_NirsevimabImmu.rds"))
saveRDS(b_NirsevimabOutPT, file = here::here("output/b_NirsevimabOutPT.rds"))
saveRDS(b_RSV, file = here::here("output/b_RSV.rds"))
# Check structure of datasets
str(b_demographics)
str(b_wellvisit)
str(b_NirsevimabImmu)
str(b_NirsevimabOutPT)
str(b_RSV)
# Check for ID duplicates before merge
sum(duplicated(b_demographics$id))
sum(duplicated(b_wellvisit$id))
sum(duplicated(b_NirsevimabImmu$id))
sum(duplicated(b_NirsevimabOutPT$id))
sum(duplicated(b_RSV$id))
# Ensure 'id' is of the same type across datasets
b_demographics$id <- as.character(b_demographics$id)
b_wellvisit$id <- as.character(b_wellvisit$id)
b_NirsevimabImmu$id <- as.character(b_NirsevimabImmu$id)
b_NirsevimabOutPT$id <- as.character(b_NirsevimabOutPT$id)
b_RSV$id <- as.character(b_RSV$id)
# Check for missing data
sum(is.na(b_demographics$id))
sum(is.na(b_wellvisit$id))
sum(is.na(b_NirsevimabImmu$id))
sum(is.na(b_NirsevimabOutPT$id))
sum(is.na(b_RSV$id))
# Merge datasets
merged_data <- left_join(b_demographics, b_wellvisit, by = "id")
merged_data <- left_join(merged_data, b_NirsevimabImmu, by = "id")
merged_data <- left_join(merged_data, b_NirsevimabOutPT, by = "id")
merged_data <- left_join(merged_data, b_RSV, by = "id")
# Create the final dataset with the required components
final_dataset <- merged_data %>%
group_by(id) %>%
summarize(
birth_date = first(birth_Date),  # Correct column name
total_well_visits = n_distinct(wellVisit_date, na.rm = TRUE),  # Counts distinct well visits
visits_within_30_days = sum(wellVisit_date <= (birth_date + 30), na.rm = TRUE),  # Correct column name
received_rsv_vaccine = ifelse(any(!is.na(Nirsevimab_immune_date)), 1, 0),  # Change "Yes" to 1 and "No" to 0
rsv_vaccine_date = ifelse(any(!is.na(Nirsevimab_immune_date)),
format(as.POSIXct(max(Nirsevimab_immune_date, na.rm = TRUE), origin = "1970-01-01"), "%Y-%m-%d"),
NA),
# Update references to medication_name and PROC_NAME
records_from_immunization = ifelse(any(!is.na(Nirsevimab_immune_date)), 1, 0),  # Change "Yes" to 1 and "No" to 0
records_from_medication = ifelse(any(!is.na(MEDICATION_NAME)), 1, 0),  # Use MEDICATION_NAME directly
records_from_procedure = ifelse(any(!is.na(PROC_NAME)), 1, 0),  # Use PROC_NAME directly
# Calculate total RSV records ensuring it cannot exceed 3
total_rsv_records = (ifelse(any(!is.na(Nirsevimab_immune_date)), 1, 0) +
ifelse(any(!is.na(MEDICATION_NAME)), 1, 0) +
ifelse(any(!is.na(PROC_NAME)), 1, 0))
)
# Save the final dataset
saveRDS(final_dataset, file = here::here("output/final_dataset.rds"))
# Check the structure and dimensions of the final dataset
str(final_dataset)
nrow(final_dataset)
# Load necessary libraries
library(officer)
library(flextable)
library(here)
# Load individual scripts
wellvisit_results <- source(here::here("code/02_wellvisitcalc.R"))$value
vaccination_results <- source(here::here("code/03_RSVVxcalc.R"))$value
final_data <- source(here::here("code/01_upload_data.R"))$value
# Create a new Word document
doc <- read_docx()
# Access results correctly
# 1. Number of Wellness Visits Per Kid
doc <- doc %>%
body_add_par("Number of Wellness Visits Per Kid", style = "heading 1") %>%
body_add_flextable(flextable(wellvisit_results$wellvisit_summary %>%
mutate(id = as.character(id))) %>%
set_header_labels(id = "Child ID", total_wellvisits = "Total Wellness Visits") %>%
set_table_properties(width = 0.75, layout = "autofit") %>%
theme_vanilla())
# 2. Number of Wellness Visits Within 30 Days from Birth
doc <- doc %>%
body_add_par("Number of Wellness Visits Within 30 Days from Birth", style = "heading 1") %>%
body_add_flextable(flextable(wellvisit_results$wellvisit_within_30 %>%
mutate(id = as.character(id))) %>%
set_header_labels(id = "Child ID",
well_visit_30days_count = "Wellness Visits Within 30 Days") %>%
set_table_properties(width = 0.75, layout = "autofit") %>%
theme_vanilla())
# 3. Number of Babies Who Received RSV Vaccine
doc <- doc %>%
body_add_par("Number of Babies Who Received RSV Vaccine", style = "heading 1") %>%
body_add_par(paste("Total number of babies who received RSV vaccine:", vaccination_results$num_babies_vx), style = "Normal")
# 4. Among Babies Who Had RSV Vaccine, How Many Received Vx Within 7 Days
doc <- doc %>%
body_add_par("Babies Who Received RSV Vaccine Within 7 Days of Birth", style = "heading 1") %>%
body_add_par(paste("Total babies vaccinated within 7 days of birth:", vaccination_results$num_babies_within_7_days), style = "Normal")
# 5. Babies with RSV Vaccine Records from Immunization, Medication, and Procedure Forms
doc <- doc %>%
body_add_par("Number of Babies Who Had RSV Vaccine", style = "heading 1") %>%
body_add_par(paste("Total number of babies who had RSV vaccine from all three sources (immunization, medication, procedure):",
vaccination_results$num_babies_with_all_records),
style = "Normal")
# Count the number of babies with RSV records for each source
num_babies_with_rsv_immunization <- sum(vaccination_results$rsv_records$records_from_immunization == "Yes")
num_babies_with_rsv_medication <- sum(vaccination_results$rsv_records$records_from_medication == "Yes")
num_babies_with_rsv_procedure <- sum(vaccination_results$rsv_records$records_from_procedure == "Yes")
# Document the counts in the Word document
doc <- doc %>%
body_add_par(paste("Number of babies with RSV vaccine documented in Immunization records:",
num_babies_with_rsv_immunization),
style = "Normal") %>%
body_add_par(paste("Number of babies with RSV vaccine documented in Medication records:",
num_babies_with_rsv_medication),
style = "Normal") %>%
body_add_par(paste("Number of babies with RSV vaccine documented in Procedure records:",
num_babies_with_rsv_procedure),
style = "Normal")
# Save the Word document
print(doc, target = here::here("output/final_report.docx"))
# Save final data set as a CSV file
write.csv(final_dataset, file = here::here("output/final_dataset.csv"), row.names = FALSE)
# Set the working directory for the R script
here::i_am("code/01_upload_data.R")
# Load necessary libraries
library(dplyr)  # For data manipulation
library(readxl)  # For reading Excel files
library(here)  # For file path management
# Read datasets from XLSX files into R
b_demographics <- readxl::read_excel(here::here("data/b_demog_2024.09.10.xlsx"))  # Demographics data
b_wellvisit <- readxl::read_excel(here::here("data/b_wellvisit_2024.09.10.xlsx"))  # Wellness visit data
b_NirsevimabImmu <- readxl::read_excel(here::here("data/b_NirsevimabImmu_2024.09.10.xlsx"))  # Immunization data
b_NirsevimabOutPT <- readxl::read_excel(here::here("data/b_NirsevimabOutPT_2024.09.10.xlsx"))  # Outpatient medication data
b_RSV <- readxl::read_excel(here::here("data/b_RSV_2024.09.10.xlsx"))  # procedure data
# Save each dataset as .rds file for later use
saveRDS(b_demographics, file = here::here("output/b_demographics.rds"))  # Save demographics data
saveRDS(b_wellvisit, file = here::here("output/b_wellvisit.rds"))  # Save wellness visit data
saveRDS(b_NirsevimabImmu, file = here::here("output/b_NirsevimabImmu.rds"))  # Save immunization data
saveRDS(b_NirsevimabOutPT, file = here::here("output/b_NirsevimabOutPT.rds"))  # Save outpatient medication data
saveRDS(b_RSV, file = here::here("output/b_RSV.rds"))  # Save procedure data
# Check structure of each dataset to understand the data types and format
str(b_demographics)
str(b_wellvisit)
str(b_NirsevimabImmu)
str(b_NirsevimabOutPT)
str(b_RSV)
# Check for ID duplicates before merging datasets
sum(duplicated(b_demographics$id))  # Count duplicates in demographics data
sum(duplicated(b_wellvisit$id))  # Count duplicates in well visit data
sum(duplicated(b_NirsevimabImmu$id))  # Count duplicates in immunization data
sum(duplicated(b_NirsevimabOutPT$id))  # Count duplicates in outpatient medication data
sum(duplicated(b_RSV$id))  # Count duplicates in procedure data
# Ensure 'id' is of the same type (character) across all datasets to facilitate merging
b_demographics$id <- as.character(b_demographics$id)
b_wellvisit$id <- as.character(b_wellvisit$id)
b_NirsevimabImmu$id <- as.character(b_NirsevimabImmu$id)
b_NirsevimabOutPT$id <- as.character(b_NirsevimabOutPT$id)
b_RSV$id <- as.character(b_RSV$id)
# Check for missing data in the 'id' column of each dataset
sum(is.na(b_demographics$id))  # Count missing IDs in demographics
sum(is.na(b_wellvisit$id))  # Count missing IDs in well visit data
sum(is.na(b_NirsevimabImmu$id))  # Count missing IDs in immunization data
sum(is.na(b_NirsevimabOutPT$id))  # Count missing IDs in outpatient medication data
sum(is.na(b_RSV$id))  # Count missing IDs in procedure data
# Merge datasets using left joins, keeping all records from demographics and adding corresponding data from other datasets
merged_data <- left_join(b_demographics, b_wellvisit, by = "id")  # Merge demographics with well visits
merged_data <- left_join(merged_data, b_NirsevimabImmu, by = "id")  # Add immunization data
merged_data <- left_join(merged_data, b_NirsevimabOutPT, by = "id")  # Add outpatient medication data
merged_data <- left_join(merged_data, b_RSV, by = "id")  # Add procedure data
# Create the final dataset with the required components by summarizing merged data
final_dataset <- merged_data %>%
group_by(id) %>%  # Group by 'id' for aggregation
summarize(
birth_date = first(birth_Date),  # Extract the first birth date for each child
total_well_visits = n_distinct(wellVisit_date, na.rm = TRUE),  # Count distinct well visit dates
visits_within_30_days = sum(wellVisit_date <= (birth_date + 30), na.rm = TRUE),  # Count visits within 30 days of birth
received_rsv_vaccine = ifelse(any(!is.na(Nirsevimab_immune_date)), 1, 0),  # Check if RSV vaccine was received (1 = Yes, 0 = No)
rsv_vaccine_date = ifelse(any(!is.na(Nirsevimab_immune_date)),
format(as.POSIXct(max(Nirsevimab_immune_date, na.rm = TRUE), origin = "1970-01-01"), "%Y-%m-%d"),  # Get the latest RSV vaccine date in "YYYY-MM-DD" format
NA),  # If no vaccine date, return NA
# Update references to medication_name and PROC_NAME with binary indicators
records_from_immunization = ifelse(any(!is.na(Nirsevimab_immune_date)), 1, 0),  # Check for records from immunization (1 = Yes, 0 = No)
records_from_medication = ifelse(any(!is.na(MEDICATION_NAME)), 1, 0),  # Check for records from medication (1 = Yes, 0 = No)
records_from_procedure = ifelse(any(!is.na(PROC_NAME)), 1, 0),  # Check for records from procedure (1 = Yes, 0 = No)
# Calculate total RSV records ensuring it cannot exceed 3
total_rsv_records = (ifelse(any(!is.na(Nirsevimab_immune_date)), 1, 0) +  # Count if there is an RSV vaccine record
ifelse(any(!is.na(MEDICATION_NAME)), 1, 0) +  # Count if there is a medication record
ifelse(any(!is.na(PROC_NAME)), 1, 0))  # Count if there is a procedure record
)
# Save the final dataset as an .rds file for further analysis
saveRDS(final_dataset, file = here::here("output/final_dataset.rds"))
# Check the structure and dimensions of the final dataset for verification
str(final_dataset)  # Check the structure of the final dataset
nrow(final_dataset)  # Get the number of rows in the final dataset
# Load necessary libraries
library(dplyr)        # For data manipulation and summarization
library(flextable)   # For creating tables in Word documents
library(here)        # For managing file paths
# Set the working directory for the R script
here::i_am("code/02_wellvisitcalc.R")  # Defines the script's location for file path resolution
# Read the dataset from the output directory
b_wellvisit <- readRDS(file = here::here("output/b_wellvisit.rds"))  # Load well visit data
b_demographics <- readRDS(file = here::here("output/b_demographics.rds"))  # Load demographic data
# Ensure IDs are in character format for consistency across datasets
b_wellvisit$id <- as.character(b_wellvisit$id)
b_demographics$id <- as.character(b_demographics$id)
# Helper function to summarize total wellness visits per child
count_well_visits <- function(dataset) {
dataset %>%
group_by(id) %>%  # Group data by ID to summarize visits
summarize(total_wellvisits = n(), .groups = 'drop') %>%  # Count total visits per ID
full_join(b_demographics %>% select(id), by = "id") %>%  # Full join to include all IDs from demographics
mutate(total_wellvisits = ifelse(is.na(total_wellvisits), 0, total_wellvisits))  # Replace NAs with 0 for missing visits
}
# Helper function to count well visits within 30 days from birth
count_well_visits_within_30_days <- function(wellvisit_data, demographic_data) {
wellvisit_data %>%
inner_join(demographic_data, by = "id") %>%  # Inner join to keep only matching IDs
filter(difftime(wellVisit_date, birth_Date, units = "days") <= 30) %>%  # Filter visits within 30 days of birth
group_by(id) %>%  # Group by ID for summarization
summarize(well_visit_30days_count = n(), .groups = 'drop') %>%  # Count visits within 30 days per ID
full_join(demographic_data %>% select(id), by = "id") %>%  # Full join to include all IDs
mutate(well_visit_30days_count = ifelse(is.na(well_visit_30days_count), 0, well_visit_30days_count))  # Replace NAs with 0
}
# Calculate the required statistics
wellvisit_summary <- count_well_visits(b_wellvisit)  # Summary of total well visits
well_visits_within_30_days <- count_well_visits_within_30_days(b_wellvisit, b_demographics)  # Visits within 30 days
# Calculate the number of unique kids in the demographics dataset
num_unique_kids <- n_distinct(b_demographics$id)  # Count of unique IDs
# Create a list to hold the results
wellness_results <- list(
num_unique_kids = num_unique_kids,  # Total unique kids
wellvisit_summary = wellvisit_summary,  # Summary of total well visits
wellvisit_within_30 = well_visits_within_30_days  # Summary of visits within 30 days
)
# Check for specific missing IDs in the wellvisit summary
missing_ids <- setdiff(b_demographics$id, wellvisit_summary$id)  # Identify missing IDs
print(missing_ids)  # Print missing IDs for debugging purposes
# Return the results list explicitly
wellness_results  # Output the results for further analysis
# Set the working directory for the R script
here::i_am("code/03_RSVVxcalc.R")  # Defines the script's location for accurate file path management
# Load necessary libraries
library(dplyr)  # For data manipulation and summarization
# Helper function to get unique IDs from a dataset
get_unique_ids <- function(dataset) {
dataset %>%
distinct(id) %>%  # Select distinct IDs to avoid duplicates
pull(id)  # Extract IDs as a vector
}
# Helper function to combine datasets
combine_datasets <- function(...) {
bind_rows(...) %>%  # Combine multiple datasets into one
distinct()  # Ensure all IDs are unique to avoid duplicates
}
# 3. Number of Babies Who Had RSV Vaccine
# Combine datasets that contain RSV vaccine information
combined_rsv_data <- combine_datasets(
select(b_NirsevimabImmu, id),  # Select IDs from immunization dataset
select(b_NirsevimabOutPT, id),  # Select IDs from outpatient dataset
select(b_RSV, id)  # Select IDs from procedure dataset
)
# Count distinct babies who received the RSV vaccine
num_babies_rsv_vx <- combined_rsv_data %>%
summarize(num_babies_rsv_vx = n()) %>%  # Count total unique IDs
pull(num_babies_rsv_vx)  # Extract the count directly
# 4. Among Babies Who Had RSV Vaccine, How Many Received the Vaccine Within 7 Days of Birth
# Helper function to combine RSV data with vaccination dates
combine_rsv_with_dates <- function() {
combine_datasets(
select(b_NirsevimabImmu, id, Nirsevimab_immune_date),  # Include immune date from immunization dataset
select(b_NirsevimabOutPT, id, Nirsevimab_immune_date),  # Include immune date from outpatient dataset
select(b_RSV, id, Nirsevimab_immune_date)  # Include immune date from procedure dataset
)
}
# Step 1: Combine datasets containing RSV vaccination dates
combined_rsv_data_with_dates <- combine_rsv_with_dates()
# Convert id columns to character for consistency
combined_rsv_data_with_dates$id <- as.character(combined_rsv_data_with_dates$id)
b_demographics$id <- as.character(b_demographics$id)
# Step 2: Join combined RSV data with demographics to check vaccination dates
rsv_check_dates <- inner_join(combined_rsv_data_with_dates, b_demographics, by = "id") %>%
mutate(days_difference = as.numeric(difftime(Nirsevimab_immune_date, birth_Date, units = "days"))) %>%  # Calculate days difference
filter(days_difference <= 7)  # Filter for those who received the vaccine within 7 days
# Step 3: Count the total number of babies who received the vaccine within 7 days
num_babies_within_7_days <- nrow(rsv_check_dates)  # Count rows in the filtered dataset
# 5. Count the number of babies with RSV vaccine documented in each dataset
num_babies_rsv_vx_immunization <- length(get_unique_ids(b_NirsevimabImmu))  # Unique IDs from immunization dataset
num_babies_rsv_vx_outpatient <- length(get_unique_ids(b_NirsevimabOutPT))  # Unique IDs from outpatient dataset
num_babies_rsv_vx_procedure <- length(get_unique_ids(b_RSV))  # Unique IDs from procedure dataset
# Create a summary of RSV records
rsv_records <- data.frame(
id = unique(c(get_unique_ids(b_NirsevimabImmu),
get_unique_ids(b_NirsevimabOutPT),
get_unique_ids(b_RSV)))  # Combine unique IDs from all sources
)
# Ensure consistent naming of columns and vectors
rsv_records <- rsv_records %>%
mutate(
records_from_immunization = ifelse(id %in% get_unique_ids(b_NirsevimabImmu), "Yes", "No"),  # Immunization records
records_from_medication = ifelse(id %in% get_unique_ids(b_NirsevimabOutPT), "Yes", "No"),  # Outpatient records
records_from_procedure = ifelse(id %in% get_unique_ids(b_RSV), "Yes", "No")  # Procedure records
)
# Create a summary of results
vaccination_results <- list(
num_babies_vx = num_babies_rsv_vx,  # Total babies vaccinated
num_babies_within_7_days = num_babies_within_7_days,  # Babies vaccinated within 7 days
num_babies_rsv_vx_immunization = num_babies_rsv_vx_immunization,  # Count from immunization dataset
num_babies_rsv_vx_outpatient = num_babies_rsv_vx_outpatient,  # Count from outpatient dataset
num_babies_rsv_vx_procedure = num_babies_rsv_vx_procedure,  # Count from procedure dataset
rsv_records = rsv_records  # Include RSV records in results
)
# Store the results in the global environment
vaccination_results  # Output the results for further analysis
# Load necessary libraries
library(officer)  # For creating and editing Word documents
library(flextable)  # For creating tables in Word documents
library(here)  # For managing file paths
# Load individual scripts to access calculated results
wellvisit_results <- source(here::here("code/02_wellvisitcalc.R"))$value  # Load wellness visit results
vaccination_results <- source(here::here("code/03_RSVVxcalc.R"))$value  # Load RSV vaccination results
final_data <- source(here::here("code/01_upload_data.R"))$value  # Load final dataset
# Create a new Word document
doc <- read_docx()  # Initialize a new Word document
# Access results correctly
# 1. Number of Wellness Visits Per Kid
doc <- doc %>%
body_add_par("Number of Wellness Visits Per Kid", style = "heading 1") %>%  # Add section heading
body_add_flextable(flextable(wellvisit_results$wellvisit_summary %>%  # Create a table from wellness visit summary
mutate(id = as.character(id))) %>%  # Convert ID to character for consistency
set_header_labels(id = "Child ID", total_wellvisits = "Total Wellness Visits") %>%  # Set header labels
set_table_properties(width = 0.75, layout = "autofit") %>%  # Set table properties
theme_vanilla())  # Apply a vanilla theme to the table
# 2. Number of Wellness Visits Within 30 Days from Birth
doc <- doc %>%
body_add_par("Number of Wellness Visits Within 30 Days from Birth", style = "heading 1") %>%  # Add section heading
body_add_flextable(flextable(wellvisit_results$wellvisit_within_30 %>%  # Create a table for wellness visits within 30 days
mutate(id = as.character(id))) %>%  # Convert ID to character
set_header_labels(id = "Child ID",
well_visit_30days_count = "Wellness Visits Within 30 Days") %>%  # Set header labels
set_table_properties(width = 0.75, layout = "autofit") %>%  # Set table properties
theme_vanilla())  # Apply a vanilla theme to the table
# 3. Number of Babies Who Received RSV Vaccine
doc <- doc %>%
body_add_par("Number of Babies Who Received RSV Vaccine", style = "heading 1") %>%  # Add section heading
body_add_par(paste("Total number of babies who received RSV vaccine:", vaccination_results$num_babies_vx), style = "Normal")  # Add total count of babies vaccinated
# 4. Among Babies Who Had RSV Vaccine, How Many Received Vaccine Within 7 Days
doc <- doc %>%
body_add_par("Babies Who Received RSV Vaccine Within 7 Days of Birth", style = "heading 1") %>%  # Add section heading
body_add_par(paste("Total babies vaccinated within 7 days of birth:", vaccination_results$num_babies_within_7_days), style = "Normal")  # Add total count of babies vaccinated within 7 days
# 5. Babies with RSV Vaccine Records from Immunization, Medication, and Procedure Forms
doc <- doc %>%
body_add_par("Number of Babies Who Had RSV Vaccine", style = "heading 1") %>%  # Add section heading
body_add_par(paste("Total number of babies who had RSV vaccine from all three sources (immunization, medication, procedure):",
vaccination_results$num_babies_with_all_records),
style = "Normal")  # Add total count from all sources
# Count the number of babies with RSV records for each source
num_babies_with_rsv_immunization <- sum(vaccination_results$rsv_records$records_from_immunization == "Yes")  # Count from immunization records
num_babies_with_rsv_medication <- sum(vaccination_results$rsv_records$records_from_medication == "Yes")  # Count from medication records
num_babies_with_rsv_procedure <- sum(vaccination_results$rsv_records$records_from_procedure == "Yes")  # Count from procedure records
# Document the counts in the Word document
doc <- doc %>%
body_add_par(paste("Number of babies with RSV vaccine documented in Immunization records:",
num_babies_with_rsv_immunization),
style = "Normal") %>%  # Add count for immunization records
body_add_par(paste("Number of babies with RSV vaccine documented in Medication records:",
num_babies_with_rsv_medication),
style = "Normal") %>%  # Add count for medication records
body_add_par(paste("Number of babies with RSV vaccine documented in Procedure records:",
num_babies_with_rsv_procedure),
style = "Normal")  # Add count for procedure records
# Save the Word document
print(doc, target = here::here("output/final_report.docx"))  # Export the document to the specified path
# Save final data set as a CSV file
write.csv(final_data, file = here::here("output/final_dataset.csv"), row.names = FALSE)  # Save final dataset to CSV
